Prathamesh lavange 
B-25 
#include <iostream>
using namespace std;

class Deque {
private:
    int *arr;
    int front;
    int rear;
    int size;

public:
    // Constructor
    Deque(int size) {
        this->size = size;
        arr = new int[size];
        front = -1;
        rear = 0;
    }

    // Check if the deque is full
    bool isFull() {
        return (front == 0 && rear == size - 1) || (front == rear + 1);
    }

    // Check if the deque is empty
    bool isEmpty() {
        return front == -1;
    }

    // Insert an element at the front
    void insertFront(int key) {
        if (isFull()) {
            cout << "Overflow: Cannot insert " << key << " at front\n";
            return;
        }

        if (front == -1) {  // Empty deque
            front = 0;
            rear = 0;
        }
        else if (front == 0) // Circular wrap
            front = size - 1;
        else
            front--;

        arr[front] = key;
        cout << "Inserted " << key << " at front\n";
    }

    // Insert an element at the rear
    void insertRear(int key) {
        if (isFull()) {
            cout << "Overflow: Cannot insert " << key << " at rear\n";
            return;
        }

        if (front == -1) {  // Empty deque
            front = 0;
            rear = 0;
        }
        else if (rear == size - 1)  // Circular wrap
            rear = 0;
        else
            rear++;

        arr[rear] = key;
        cout << "Inserted " << key << " at rear\n";
    }

    // Delete an element from the front
    void deleteFront() {
        if (isEmpty()) {
            cout << "Underflow: Cannot delete from front\n";
            return;
        }

        cout << "Deleted " << arr[front] << " from front\n";

        if (front == rear) {  // Only one element left
            front = -1;
            rear = -1;
        }
        else if (front == size - 1)  // Circular wrap
            front = 0;
        else
            front++;
    }

    // Delete an element from the rear
    void deleteRear() {
        if (isEmpty()) {
            cout << "Underflow: Cannot delete from rear\n";
            return;
        }

        cout << "Deleted " << arr[rear] << " from rear\n";

        if (front == rear) {  // Only one element left
            front = -1;
            rear = -1;
        }
        else if (rear == 0)  // Circular wrap
            rear = size - 1;
        else
            rear--;
    }

    // Display the deque
    void display() {
        if (isEmpty()) {
            cout << "Deque is empty\n";
            return;
        }

        cout << "Deque elements: ";
        int i = front;
        while (true) {
            cout << arr[i] << " ";
            if (i == rear)
                break;
            i = (i + 1) % size;
        }
        cout << "\n";
    }

    // Destructor
    ~Deque() {
        delete[] arr;
    }
};

// Main function to test the Deque class with user input
int main() {
    int size;
    cout << "Enter the size of the deque: ";
    cin >> size;
    
    Deque dq(size);

    int choice, element;
    do {
        cout << "\nMenu:\n";
        cout << "1. Insert at front\n";
        cout << "2. Insert at rear\n";
        cout << "3. Delete from front\n";
        cout << "4. Delete from rear\n";
        cout << "5. Display deque\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter element to insert at front: ";
                cin >> element;
                dq.insertFront(element);
                break;
            case 2:
                cout << "Enter element to insert at rear: ";
                cin >> element;
                dq.insertRear(element);
                break;
            case 3:
                dq.deleteFront();
                break;
            case 4:
                dq.deleteRear();
                break;
            case 5:
                dq.display();
                break;
            case 6:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 6);

    return 0;
}